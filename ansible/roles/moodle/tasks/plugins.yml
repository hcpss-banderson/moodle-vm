---
- name:  Remove the plugin folder if it exists
  file: path=/tmp/moodle-plugins state=absent

- name: Make sure we have a folder to download our plugins to
  file: path=/tmp/{{ item }} state=directory
  with_items:
    - moodle-plugins
    - moodle-plugins/moodle
    - moodle-plugins/github
  
# Take care of the plugins that are hosted on moodle.org
- name: Download plugins from moodle.org
  get_url:
    url: "{{ item.url }}"
    dest: /tmp/moodle-plugins/{{ item.name }}.zip
  with_items: "{{ moodle_plugins }}"
  when: item.service is not defined
  
- name: Remove plugin folders if they exist
  file: 
    path: "{{ moodle_location }}/{{ item.destination }}/{{ item.shortname }}"
    state: absent
  with_items: "{{ moodle_plugins }}"
  when: item.service is not defined
  
- name: Unzip plugin files
  unarchive:
    copy: no
    src: /tmp/moodle-plugins/{{ item.name }}.zip
    dest: "{{ moodle_location }}/{{ item.destination }}"
    creates: "{{ moodle_location }}/{{ item.destination }}/{{ item.shortname }}/lib.php"
  with_items: "{{ moodle_plugins }}"
  when: item.service is not defined or item.service == 'moodle'
  
# Take care of plugins hosted on github
# 
# Some plugins require authentication...
- name: Clone github repos where authentication is required
  git:
    repo: "{{ 
      item.url | 
      regex_replace(
        'https://github.com', 
        'https://' ~ github_access_token ~ ':x-oauth-basic@github.com'
      )
    }}"
    version: "{{ item.tag | default('HEAD') }}"
    dest: /tmp/moodle-plugins/github/{{ item.shortname }}/
    accept_hostkey: True
  with_items: "{{ moodle_plugins }}"
  when: item.service is defined and item.service == 'github' and item.auth is defined
  
# ...and others don't...
- name: Clone github repos where authentication is not required
  git:
    repo: "{{ item.url }}"
    version: "{{ item.tag | default('HEAD') }}"
    dest: /tmp/moodle-plugins/github/{{ item.shortname }}/
    accept_hostkey: True
  with_items: "{{ moodle_plugins }}"
  when: item.auth is not defined and item.service is defined and item.service == 'github'
  
# ...either way, let's remove the .git folders...
- name: Remove the .git folders
  file: path=/tmp/moodle-plugins/github/{{ item.shortname }}/.git state=absent
  with_items: "{{ moodle_plugins }}"
  when: item.service is defined and item.service == 'github'
  
# ...and .gitignore for good measure
- name: Remove the .gitignore file
  file: 
    path: /tmp/moodle-plugins/github/{{ item.shortname }}/.gitignore
    state: absent
  with_items: "{{ moodle_plugins }}"
  when: item.service is defined and item.service == 'github'
  
- name: Copy github plugins to the install location
  command: >
    mv
    /tmp/moodle-plugins/github/{{ item.shortname }} 
    {{ moodle_location }}/{{ item.destination }}/
  with_items: "{{ moodle_plugins }}"
  when: item.service is defined and item.service == 'github'
